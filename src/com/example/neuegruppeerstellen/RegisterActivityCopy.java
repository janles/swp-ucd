package com.example.neuegruppeerstellen;

import java.io.IOException;
import java.util.ArrayList;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.os.AsyncTask;
import android.os.Bundle;
import android.util.Log;
import android.view.View.OnTouchListener;
import android.widget.ArrayAdapter;
import android.widget.ListAdapter;
import android.widget.ListView;
import android.widget.Toast;

import com.example.neuegruppeerstellen.messageEndpoint.MessageEndpoint;
import com.example.neuegruppeerstellen.messageEndpoint.model.CollectionResponseMessageData;
import com.google.api.client.extensions.android.http.AndroidHttp;
import com.google.api.client.http.HttpRequest;
import com.google.api.client.http.HttpRequestInitializer;
import com.google.api.client.json.jackson.JacksonFactory;

public class RegisterActivityCopy extends Activity {

	enum State {
		REGISTERED, REGISTERING, UNREGISTERED, UNREGISTERING
	}

	private State curState = State.UNREGISTERED;
	private OnTouchListener registerListener = null;
	private OnTouchListener unregisterListener = null;
	private MessageEndpoint messageEndpoint = null;

	private ArrayList<MyInformationEntry> gruppenListe = new ArrayList<MyInformationEntry>();

	public void showMessage() {
		ListAdapter listenAdapter = new ArrayAdapter<MyInformationEntry>(this,
				android.R.layout.simple_list_item_1, gruppenListe);
		ListView lv_groups = (ListView) findViewById(R.id.listView1);
		lv_groups.setAdapter(listenAdapter);
	}

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_register);

		gruppenListe.add(new MyInformationEntry("Marie", "01:25"));
		gruppenListe.add(new MyInformationEntry("Claudia", "00:14"));
		gruppenListe.add(new MyInformationEntry("Marie", "12:12"));

		// ***********
		showMessage();
		// ***********

		if (GCMIntentService.PROJECT_NUMBER == null
				|| GCMIntentService.PROJECT_NUMBER.length() == 0) {
			showDialog("Unable to register for Google Cloud Messaging. "
					+ "Your application's PROJECT_NUMBER field is unset! You can change "
					+ "it in GCMIntentService.java");
		} else {
			try {
				GCMIntentService.register(getApplicationContext());
			} catch (Exception e) {
				Log.e(RegisterActivity.class.getName(),
						"Exception received when attempting to register for Google Cloud "
								+ "Messaging. Perhaps you need to set your virtual device's "
								+ " target to Google APIs? "
								+ "See https://developers.google.com/eclipse/docs/cloud_endpoints_android"
								+ " for more information.", e);
				showDialog("There was a problem when attempting to register for "
						+ "Google Cloud Messaging. If you're running in the emulator, "
						+ "is the target of your virtual device set to 'Google APIs?' "
						+ "See the Android log for more details.");
			}
		}

		/*
		 * build the messaging endpoint so we can access old messages via an
		 * endpoint call
		 */
		MessageEndpoint.Builder endpointBuilder = new MessageEndpoint.Builder(
				AndroidHttp.newCompatibleTransport(), new JacksonFactory(),
				new HttpRequestInitializer() {
					public void initialize(HttpRequest httpRequest) {
					}
				});

		messageEndpoint = CloudEndpointUtils.updateBuilder(endpointBuilder)
				.build();
	}

	@Override
	protected void onNewIntent(Intent intent) {
		super.onNewIntent(intent);

		/*
		 * If we are dealing with an intent generated by the GCMIntentService
		 * class, then display the provided message.
		 */
		if (intent.getBooleanExtra("gcmIntentServiceMessage", false)) {

			showDialog(intent.getStringExtra("message"));

			if (intent.getBooleanExtra("registrationMessage", false)) {

			} else {
				/*
				 * if we didn't get a registration/unregistration message then
				 * go get the last 5 messages from app-engine
				 */
				new QueryMessagesTask(this, messageEndpoint).execute();
			}
		}
	}

	private void showDialog(String message) {
		new AlertDialog.Builder(this)
				.setMessage(message)
				.setPositiveButton(android.R.string.ok,
						new DialogInterface.OnClickListener() {
							public void onClick(DialogInterface dialog, int id) {
								dialog.dismiss();
							}
						}).show();
	}

	/*
	 * Need to run this in background so we don't hold up the UI thread, this
	 * task will ask the App Engine backend for the last 5 messages sent to it
	 */
	private class QueryMessagesTask extends
			AsyncTask<Void, Void, CollectionResponseMessageData> {
		Exception exceptionThrown = null;
		Activity activity;
		MessageEndpoint messageEndpoint;

		public QueryMessagesTask(Activity activity,
				MessageEndpoint messageEndpoint) {
			this.activity = activity;
			this.messageEndpoint = messageEndpoint;
		}

		@Override
		protected CollectionResponseMessageData doInBackground(Void... params) {
			try {
				CollectionResponseMessageData messages = messageEndpoint
						.listMessages().setLimit(20).execute();
				return messages;
			} catch (IOException e) {
				exceptionThrown = e;
				return null;
				// Handle exception in PostExecute
			}
		}

		protected void onPostExecute(CollectionResponseMessageData messages) {
			// Check if exception was thrown
			if (exceptionThrown != null) {
				Log.e(RegisterActivity.class.getName(),
						"Exception when listing Messages", exceptionThrown);
				showDialog("Failed to retrieve the last 5 messages from "
						+ "the endpoint at " + messageEndpoint.getBaseUrl()
						+ ", check log for details");
			} else {

				// TextView messageView = (TextView) findViewById(R.id.msgView);
				// messageView.setText("Last 5 Messages read from " +
				// messageEndpoint.getBaseUrl() + ":\n");
				// for(MessageData message : messages.getItems()) {
				// messageView.append(message.getMessage() + "\n");
				// }

				String message = messages.getItems().get(0).getMessage();
				String[] temp = message.split(" ");
				String name = temp[0];
				String eta = temp[1];
				MyInformationEntry mie = new MyInformationEntry(name, eta);

				Toast.makeText(getApplicationContext(),
						"toast mit message " + message, Toast.LENGTH_LONG)
						.show();

				int indexOfEntry = -1;
				for (int i = 0; i < gruppenListe.size(); i++) {
					if (gruppenListe.get(i).getName().equals(name)) {
						indexOfEntry = i;
						break;
					}
				}
				if (indexOfEntry != -1) {
					gruppenListe.set(indexOfEntry, mie);
				}
				showMessage();

			}
		}
	}
}